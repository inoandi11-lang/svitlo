<?php
// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
$BOT_TOKEN = '8071462275:AAHjqCgsK6aAmfntsBwlo09z_Hcxq2mYk4M';
$WEBHOOK_URL = 'https://yourdomain.com/telegram-bot.php'; // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
$OPENAI_API_KEY = 'your-openai-api-key'; // –î–æ–¥–∞–π—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á
$DATA_FILE = 'electrobalance_data.json';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
function logMessage($message) {
    file_put_contents('bot.log', date('Y-m-d H:i:s') . ' - ' . $message . "\n", FILE_APPEND);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
function sendMessage($chat_id, $text, $reply_markup = null) {
    global $BOT_TOKEN;
    
    $data = [
        'chat_id' => $chat_id,
        'text' => $text,
        'parse_mode' => 'HTML'
    ];
    
    if ($reply_markup) {
        $data['reply_markup'] = json_encode($reply_markup);
    }
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://api.telegram.org/bot{$BOT_TOKEN}/sendMessage");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    
    $result = curl_exec($ch);
    curl_close($ch);
    
    return json_decode($result, true);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
function downloadPhoto($file_id) {
    global $BOT_TOKEN;
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://api.telegram.org/bot{$BOT_TOKEN}/getFile?file_id={$file_id}");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    
    $result = curl_exec($ch);
    curl_close($ch);
    
    $file_info = json_decode($result, true);
    
    if (!$file_info['ok']) {
        return false;
    }
    
    $file_path = $file_info['result']['file_path'];
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
    $photo_url = "https://api.telegram.org/file/bot{$BOT_TOKEN}/{$file_path}";
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $photo_url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    
    $photo_data = curl_exec($ch);
    curl_close($ch);
    
    return $photo_data;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ChatGPT Vision
function recognizeMeterReading($photo_data, $meter_type) {
    global $OPENAI_API_KEY;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ç–æ –≤ base64
    $base64_image = base64_encode($photo_data);
    
    $prompt = "–†–æ–∑–ø—ñ–∑–Ω–∞–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –Ω–∞ —Ñ–æ—Ç–æ. –¶–µ {$meter_type} –ª—ñ—á–∏–ª—å–Ω–∏–∫. –ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤, –∫—Ä–∞–ø–æ–∫ —á–∏ —ñ–Ω—à–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 12345";
    
    $data = [
        'model' => 'gpt-4o',
        'messages' => [
            [
                'role' => 'user',
                'content' => [
                    [
                        'type' => 'text',
                        'text' => $prompt
                    ],
                    [
                        'type' => 'image_url',
                        'image_url' => [
                            'url' => "data:image/jpeg;base64,{$base64_image}"
                        ]
                    ]
                ]
            ]
        ],
        'max_tokens' => 50,
        'temperature' => 0.1
    ];
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/chat/completions');
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Authorization: Bearer ' . $OPENAI_API_KEY
    ]);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    
    $result = curl_exec($ch);
    curl_close($ch);
    
    $response = json_decode($result, true);
    
    if (isset($response['choices'][0]['message']['content'])) {
        $reading = trim($response['choices'][0]['message']['content']);
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —á–∏—Å–ª–æ
        if (is_numeric($reading)) {
            return intval($reading);
        }
    }
    
    return false;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
function loadData() {
    global $DATA_FILE;
    
    if (!file_exists($DATA_FILE)) {
        return [
            'settings' => [
                'price_per_kwh' => 8,
                'monthly_payment' => 2000
            ],
            'records' => []
        ];
    }
    
    $data = file_get_contents($DATA_FILE);
    return json_decode($data, true);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
function saveData($data) {
    global $DATA_FILE;
    file_put_contents($DATA_FILE, json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
function addRecord($vt, $nt, $date = null) {
    if (!$date) {
        $date = date('Y-m-d');
    }
    
    $data = loadData();
    
    $record = [
        'date' => $date,
        'vt' => $vt,
        'nt' => $nt
    ];
    
    $data['records'][] = $record;
    saveData($data);
    
    return true;
}

// –û–±—Ä–æ–±–∫–∞ webhook
$input = file_get_contents('php://input');
$update = json_decode($input, true);

logMessage('Received update: ' . $input);

if (!$update) {
    http_response_code(400);
    exit('Invalid JSON');
}

$message = $update['message'] ?? null;
if (!$message) {
    http_response_code(200);
    exit('No message');
}

$chat_id = $message['chat']['id'];
$text = $message['text'] ?? '';
$photos = $message['photo'] ?? [];

// –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
$user_states_file = 'user_states.json';
$user_states = [];

if (file_exists($user_states_file)) {
    $user_states = json_decode(file_get_contents($user_states_file), true);
}

$user_id = $message['from']['id'];
$user_state = $user_states[$user_id] ?? 'idle';

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
if ($text === '/start') {
    $user_states[$user_id] = 'idle';
    file_put_contents($user_states_file, json_encode($user_states));
    
    sendMessage($chat_id, "üîå <b>–ï–ª–µ–∫—Ç—Ä–æ–ë–∞–ª–∞–Ω—Å –ë–æ—Ç</b>\n\n"
        . "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –¥–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó.\n\n"
        . "–î–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /add —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å.");
    
} elseif ($text === '/add') {
    $user_states[$user_id] = 'waiting_vt_photo';
    file_put_contents($user_states_file, json_encode($user_states));
    
    $keyboard = [
        'inline_keyboard' => [
            [
                ['text' => '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'callback_data' => 'cancel']
            ]
        ]
    ];
    
    sendMessage($chat_id, "üì∏ <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞</b>\n\n"
        . "1Ô∏è‚É£ –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ <b>VT –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞</b> (–¥–µ–Ω–Ω–∏–π —Ç–∞—Ä–∏—Ñ)", $keyboard);
    
} elseif ($text === '/cancel') {
    $user_states[$user_id] = 'idle';
    file_put_contents($user_states_file, json_encode($user_states));
    
    sendMessage($chat_id, "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
    
} elseif ($user_state === 'waiting_vt_photo' && !empty($photos)) {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ VT —Ñ–æ—Ç–æ
    $photo = end($photos); // –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–∏–π —Ä–æ–∑–º—ñ—Ä
    $photo_data = downloadPhoto($photo['file_id']);
    
    if ($photo_data) {
        $vt_reading = recognizeMeterReading($photo_data, 'VT (–¥–µ–Ω–Ω–∏–π —Ç–∞—Ä–∏—Ñ)');
        
        if ($vt_reading !== false) {
            $user_states[$user_id] = 'waiting_nt_photo';
            $user_states[$user_id . '_vt'] = $vt_reading;
            file_put_contents($user_states_file, json_encode($user_states));
            
            sendMessage($chat_id, "‚úÖ VT –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: <b>{$vt_reading}</b>\n\n"
                . "2Ô∏è‚É£ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ <b>NT –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞</b> (–Ω—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ)");
        } else {
            sendMessage($chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫ VT –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞.\n\n"
                . "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –±—ñ–ª—å—à —á—ñ—Ç–∫–∏–º —Ñ–æ—Ç–æ.");
        }
    } else {
        sendMessage($chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
    
} elseif ($user_state === 'waiting_nt_photo' && !empty($photos)) {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ NT —Ñ–æ—Ç–æ
    $photo = end($photos);
    $photo_data = downloadPhoto($photo['file_id']);
    
    if ($photo_data) {
        $nt_reading = recognizeMeterReading($photo_data, 'NT (–Ω—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ)');
        
        if ($nt_reading !== false) {
            $vt_reading = $user_states[$user_id . '_vt'];
            
            // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å
            $date = date('Y-m-d');
            addRecord($vt_reading, $nt_reading, $date);
            
            // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            unset($user_states[$user_id]);
            unset($user_states[$user_id . '_vt']);
            file_put_contents($user_states_file, json_encode($user_states));
            
            $total_consumption = $vt_reading + $nt_reading;
            
            sendMessage($chat_id, "‚úÖ <b>–ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!</b>\n\n"
                . "üìÖ –î–∞—Ç–∞: {$date}\n"
                . "‚òÄÔ∏è VT (–¥–µ–Ω–Ω–∏–π): {$vt_reading}\n"
                . "üåô NT (–Ω—ñ—á–Ω–∏–π): {$nt_reading}\n"
                . "üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫: {$total_consumption}\n\n"
                . "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /add –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É.");
        } else {
            sendMessage($chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫ NT –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞.\n\n"
                . "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –±—ñ–ª—å—à —á—ñ—Ç–∫–∏–º —Ñ–æ—Ç–æ.");
        }
    } else {
        sendMessage($chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
    
} elseif (!empty($photos)) {
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ –Ω–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ
    sendMessage($chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add —â–æ–± –¥–æ–¥–∞—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞.");
    
} else {
    // –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞
    sendMessage($chat_id, "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.");
}

// –û–±—Ä–æ–±–∫–∞ callback queries
$callback_query = $update['callback_query'] ?? null;
if ($callback_query) {
    $callback_data = $callback_query['data'];
    $callback_chat_id = $callback_query['message']['chat']['id'];
    
    if ($callback_data === 'cancel') {
        $user_states[$user_id] = 'idle';
        file_put_contents($user_states_file, json_encode($user_states));
        
        // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "https://api.telegram.org/bot{$BOT_TOKEN}/answerCallbackQuery");
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, [
            'callback_query_id' => $callback_query['id'],
            'text' => '–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ'
        ]);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_exec($ch);
        curl_close($ch);
        
        sendMessage($callback_chat_id, "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
    }
}

http_response_code(200);
echo 'OK';
?>
